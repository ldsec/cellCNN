 # -*- coding: utf-8 -*-
import re
import os
import numpy as np
from matplotlib import pyplot as plt

# from pylab import rcParams
plt.style.use('seaborn')
font = {'family' : 'normal',
        'weight' : 'bold',
        'size'   : 35}

plt.rc('font', **font)

def plot_micro():
     # 1. filter num
     x = np.array([2, 4, 8])
     
     # 2. data of batch = 1
     m1 = {
          'prepare': np.array([24.42755068, 25.19794894, 26.31910534]),
          'forward': np.array([1.75561309, 3.27513337, 6.40319527]),
          'backward': np.array([2.91261827, 4.86219892, 9.04591785]),
          'reduce': np.array([0.31215145, 0.50676524, 0.92202973]),
     }  
     s1 = {
          'prepare': np.array([0.8233933404, 0.8448166989, 0.9520308814]),
          'forward': np.array([0.01732030717, 0.03208901755, 0.1915892027]),
          'backward': np.array([0.02882096484, 0.04399822382, 0.2122780041]),
          'reduce': np.array([0.01097614845, 0.0195877831, 0.03575286591]),
     }  

     m10 = {
          'prepare': np.array([24.42755068, 25.19794894, 26.31910534]),
          'forward': np.array([19.26150172, 36.50775283, 70.09024712]),
          'backward': np.array([29.0742886, 49.00082651, 88.17362271]),
          'reduce': np.array([0.33620251, 0.55323338, 0.95894135]),
     }  
     s10 = {
          'prepare': np.array([0.8233933404, 0.8448166989, 0.9520308814]),
          'forward': np.array([0.1852565863, 0.8064517305, 2.047155328]),
          'backward': np.array([0.2570277014, 0.8772146653, 2.883161479]),
          'reduce': np.array([0.009981389603, 0.02476735557, 0.03921506766]),
     }
     
     # fig, (ax0, ax1, ax2, ax3, ax4, ax5) = plt.subplots(2, 3, sharey=True)
     fig, ax_list = plt.subplots(1, 2, figsize=(10, 4), sharey=False)
     ax_list = ax_list.flatten()
     ax_list[0].set_ylim([0, 40])
     
     for phaze in m1.keys():
          ax_list[0].errorbar(x, m1[phaze], yerr=s1[phaze], fmt='-o',
                    mec='yellow', ms=5, mew=1, label=phaze)
     ax_list[0].set_title('Batch Size = 1', fontweight='bold')
     
     for phaze in m10.keys():
          ax_list[1].errorbar(x, m10[phaze], yerr=s10[phaze], fmt='-o',
                    mec='yellow', ms=5, mew=1, label=phaze)
     ax_list[1].set_title('Batch Size = 10', fontweight='bold')
     
     for ax in ax_list:
          ax.set_xlabel("Number of filters", fontweight='bold')
          ax.legend(loc='upper left')

     ax_list[0].set_ylabel("Overhead(s)", fontweight='bold')
     
     plt.savefig("micro.pdf")
     plt.show()


def plot_collect():
     # 1. filter num
     x = np.array([2, 4, 8, 16, 32])

     # 2. data of batch = 1
     m = {
          'naive': np.array([0.11589095, 0.21112965, 0.42525762, 0.8394644299999999, 1.686788]),
          'optimized': np.array([0.12206956999999999, 0.18072242, 0.24185504, 0.30258435000000006, 0.36841513]),
     }  
     s = {
          'naive': np.array([0.004233629991921823, 0.005184689562403907, 0.009112127732840456, 0.022129836125830235, 0.0398392531757311]),
          'optimized': np.array([0.0027168255203637915, 0.0031780915275680726, 0.0033136974446077447, 0.003245248590555111, 0.004827774608875267]),
     } 
     
     # fig, (ax0, ax1, ax2, ax3, ax4, ax5) = plt.subplots(2, 3, sharey=True)
     fig, ax = plt.subplots(1, 1, figsize=(5, 4), sharey=False)
     # ax_list = ax_list.flatten()
     # ax_list[0].set_ylim([0, 40])

     ax.errorbar(x, m['naive'], yerr=s['naive'], fmt='-o', mec='yellow', ms=5, mew=1, label="naive")

     ax.errorbar(x, m['optimized'], yerr=s['optimized'], fmt='-o', mec='yellow', ms=5, mew=1, label="optimized")

     ax.set_title('Overhead of Collect Operation', fontweight='bold')    
     
     ax.set_xlabel("Number of classes", fontweight='bold')
     ax.legend(loc='upper left')
     ax.set_ylabel("Overhead(s)", fontweight='bold')
     
     plt.savefig("collect.pdf")
     plt.show()

def plot_error():
     # 1. filter num
     x = list()
     for i in range(50):
          x.append(i+1)
     x = np.array(x)

     # 2. data of batch = 1
     m1 = {
          'conv': np.array([3.3423782037568924e-19, 1.4733984142881527e-18, 3.47598763641797e-18, 6.889972195697168e-18, 1.2437941201775059e-17, 2.0144091455191028e-17, 2.815508302416779e-17, 3.766030495804966e-17, 4.8007520103819937e-17, 5.697350300129132e-17, 6.887437948289045e-17, 8.189252488309396e-17, 9.711225594383009e-17, 1.1627783079396314e-16, 1.3624435287424294e-16, 1.5914817364373737e-16, 1.8411895113279099e-16, 2.147630573658546e-16, 2.506697197767354e-16, 2.839034779428248e-16, 3.201512322587108e-16, 3.507013011717378e-16, 3.8248120153184357e-16, 4.159281126655972e-16, 4.486366463795894e-16, 4.787555814040324e-16, 5.058742069058316e-16, 5.371242311822686e-16, 5.703069666202006e-16, 6.058138217866207e-16, 6.422774926058501e-16, 6.748832398979072e-16, 7.088673601220581e-16, 7.394468655095749e-16, 7.721946189501309e-16, 7.944235214635965e-16, 8.248770161509509e-16, 8.592117134781555e-16, 8.974864481120044e-16, 9.368115009673985e-16, 9.695843580677585e-16, 1.0042502446816594e-15, 1.04505184757686e-15, 1.0900409965662154e-15, 1.1428720077181857e-15, 1.2024219748695535e-15, 1.2650254706446757e-15, 1.3232078735904352e-15, 1.3781370471381604e-15, 1.4256417434262932e-15]),
          'dense': np.array([1.0577014636126482e-23, 1.0622160673328692e-22, 3.240288905243669e-22, 8.903315568514137e-22, 1.8620178695817805e-21, 3.159450461412326e-21, 7.204161134590771e-21, 1.6105011039605925e-20, 3.327792275596987e-20, 3.55230248715902e-20, 4.0204873634500396e-20, 3.560736247654666e-20, 3.763681177666565e-20, 5.0728441680225955e-20, 9.0481389590053e-20, 1.603575984628213e-19, 2.335897704600732e-19, 2.9130355844821047e-19, 3.575386182240346e-19, 5.464260180887688e-19, 7.422583129442089e-19, 1.1892190197572467e-18, 1.5732624481660863e-18, 1.9448312369134925e-18, 2.3361703765747863e-18, 2.666975769758771e-18, 2.6026799185952516e-18, 2.4416513801359524e-18, 2.3166583276682223e-18, 1.7964761763206835e-18, 1.3037050373696262e-18, 8.036529357894008e-19, 5.578678665154444e-19, 4.227591545303802e-19, 4.770672100677625e-19, 5.57220230182508e-19, 6.376737320487841e-19, 7.367727855988051e-19, 7.914416803793189e-19, 7.107836965588808e-19, 6.79156710437106e-19, 6.471308383804803e-19, 7.469849675705577e-19, 1.0522306522424235e-18, 1.3577781432403842e-18, 1.3659479146095832e-18, 1.2487681920819625e-18, 1.3586028015213848e-18, 1.3633933967739025e-18, 1.5255823973720153e-18]),
     }  
     m10 = {
          'conv': np.array([2.6328790340778666e-18, 1.5726960072071643e-17, 3.605360438257155e-17, 6.924276440385653e-17, 1.154803844150669e-16, 1.7512230337658054e-16, 2.451803295596574e-16, 3.4474467001922543e-16, 4.701611695935306e-16, 6.081502077185492e-16, 7.576283192352267e-16, 9.14566137228244e-16, 1.0648440378443567e-15, 1.2456761041173846e-15, 1.3936461175852157e-15, 1.5367139189240615e-15, 1.6869801425353526e-15, 1.843343064737353e-15, 2.0029338446106132e-15, 2.1630857462804267e-15, 2.333529066736369e-15, 2.522250572550342e-15, 2.727301725190893e-15, 2.9442879126587377e-15, 3.17523933378037e-15, 3.4136091842383473e-15, 3.630898537085887e-15, 3.8829393274498904e-15, 4.112927234257022e-15, 4.373117545646216e-15, 4.6193246196951986e-15, 4.924835538973969e-15, 5.22896199201482e-15, 5.52972557577542e-15, 5.78969830457309e-15, 6.092737251721905e-15, 6.3716628650040076e-15, 6.645424499384874e-15, 6.967858159637813e-15, 7.26527975517548e-15, 7.587530533190853e-15, 7.88560703128868e-15, 8.15629762157207e-15, 8.371987730694761e-15, 8.55780804478101e-15, 8.748296314134562e-15, 8.949278568425645e-15, 9.128641173239438e-15, 9.263817511653781e-15, 9.427331947890086e-15]),
          'dense': np.array([3.384215429147193e-23, 4.290526441310847e-22, 3.3306692782641256e-21, 7.167727020739446e-21, 2.053325506552994e-20, 4.752045057287958e-20, 1.3994229574556347e-19, 3.0329874554838554e-19, 4.542155873548731e-19, 9.648356639980568e-19, 1.5907606795000363e-18, 2.931926069802751e-18, 3.044569381052909e-18, 2.5935123448841018e-18, 2.4272965279878154e-18, 5.8342444761724086e-18, 1.1090513739449069e-17, 1.4577651633387446e-17, 2.1232314996962773e-17, 3.536649198460515e-17, 4.945310365412465e-17, 7.088420000632296e-17, 9.368170989450984e-17, 1.2831970784693293e-16, 1.6212149842176714e-16, 1.9467938059502063e-16, 2.1859786001759688e-16, 2.232951464173364e-16, 2.1637182139578324e-16, 2.5411604607243135e-16, 2.8303665503754235e-16, 2.936026814249783e-16, 3.2352781776505194e-16, 3.514272603994076e-16, 3.4392690281425597e-16, 3.5112898263576576e-16, 3.624673826766126e-16, 4.079174039344928e-16, 4.4303814449964213e-16, 5.114976397743017e-16, 6.182003238332998e-16, 7.31749462531536e-16, 8.565439502081911e-16, 9.549305116060459e-16, 1.082734254793032e-15, 1.242341957654607e-15, 1.471602291963511e-15, 1.6602637390420978e-15, 1.911698667102939e-15, 2.0998849868047635e-15]),
     }
     std = np.zeros(50)
     
     # fig, (ax0, ax1, ax2, ax3, ax4, ax5) = plt.subplots(2, 3, sharey=True)
     fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharey=False)

     ax1.errorbar(x, m1['conv'], yerr=std, fmt='-o', mec='yellow', ms=5, mew=1, label="conv")
     ax1.errorbar(x, m1['dense'], yerr=std, fmt='-o', mec='yellow', ms=5, mew=1, label="dense")
     ax2.errorbar(x, m10['conv'], yerr=std, fmt='-o', mec='yellow', ms=5, mew=1, label="conv")
     ax2.errorbar(x, m10['dense'], yerr=std, fmt='-o', mec='yellow', ms=5, mew=1, label="dense")

     ax1.set_title('Batch size=1', fontweight='bold')    
     ax2.set_title('Batch size=10', fontweight='bold')
     
     ax1.set_xlabel("iteration", fontweight='bold')
     ax1.legend(loc='upper left')
     ax1.set_ylabel("mse error", fontweight='bold')

     ax2.set_xlabel("iteration", fontweight='bold')
     ax2.legend(loc='upper left')
     ax2.set_ylabel("mse error", fontweight='bold')
     
     plt.savefig("error.pdf")
     plt.show()


if __name__ == "__main__":
    plot_error()
